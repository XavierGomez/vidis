<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<project basedir="." default="compile" name="Vidis">
	
	<target name="prepare" depends="get-os-properties,set-system-properties,set-vidis-properties" description="Retrieve global required data.">
		<echo message="OK" />
	</target>
	
	<target name="set-system-properties">
		<tstamp>
			<format property="DateSTAMP" pattern="yyyy-MM-dd" />
			<format property="TimeSTAMP" pattern="HH-mm-ss-S"/>
		</tstamp>	
		<property name="debuglevel" value="source,lines,vars"/>
		<echo message="OK" />
	</target>
	
	<target name="set-vidis-properties" description="Set Vidis properties.">
		<echo message="${jogl.library.path}"/>
		<!-- compiler settings -->
		<property name="vidis.target" value="1.5 "/>
		<property name="vidis.source" value="1.5"/>
		
		<!-- main entry point of the app -->
		<!--<property name="vidis.main" value="vis.StartUp" />-->
		<property name="vidis.main" value="vidis.ui.StartUp" />
		<!--<property name="vidis.main" value="main.test.TestSim" />-->
		
		<!-- directory configurations -->
		<property name="vidis.src" value="${basedir}${path-spacer}src" />
		<property name="vidis.bin" value="${basedir}${path-spacer}bin" />
		<property name="vidis.doc" value="${basedir}${path-spacer}doc" />
		<property name="vidis.doc.javadoc" value="${vidis.doc}${path-spacer}javadoc" />
		<property name="vidis.lib" value="${basedir}${path-spacer}lib" />
		<property name="vidis.builds" value="${basedir}${path-spacer}builds" />
		
		<!-- libraries -->
		<path id="vidis.libraries">
	       	<pathelement location="${vidis.lib}${path-spacer}${jogl.library.path}"/>
			<pathelement location="${java.library.path}"/>
		</path>
		<property name="vidis.libraries_str" refid="vidis.libraries" />
		
		<!-- classpath -->
	    <path id="vidis.classpath">
	        <pathelement path="${vidis.bin}" />
	    	<pathelement location="${vidis.lib}${path-spacer}java3d-151${path-spacer}vecmath.jar"/>
	    	<pathelement location="${vidis.lib}${path-spacer}jogl-1.1.1${path-spacer}gluegen-rt.jar"/>
	    	<pathelement location="${vidis.lib}${path-spacer}jogl-1.1.1${path-spacer}jogl.jar"/>
	    	<pathelement location="${vidis.lib}${path-spacer}ant${path-spacer}ant-contrib-1.0b3.jar"/>
	    	<pathelement location="${vidis.lib}${path-spacer}log4j${path-spacer}log4j-1.2.15.jar"/>
	    	<pathelement path="${java.class.path}"/>
	    </path>
		<property name="classpath" refid="vidis.classpath" />
		
		<echo message="OK" />
	</target>
	
	<!-- target init -->
    <target name="init-compile" depends="prepare,output-system-properties">
        <mkdir dir="${vidis.bin}"/>
        <copy includeemptydirs="false" todir="${vidis.bin}">
            <fileset dir="${vidis.src}" excludes="**${path-spacer}*.launch, **${path-spacer}*.java"/>
        </copy>
    	<echo message="OK" />
    </target>
	
	<target name="init-javadoc" depends="prepare,output-system-properties">
		<mkdir dir="${vidis.doc.javadoc}" />
		<echo message="OK" />
	</target>
	
	<!-- target clean -->
    <target name="clean-bin" depends="prepare">
        <delete dir="${vidis.bin}" failonerror="true" verbose="yes" />
    	<echo message="OK" />
    </target>
	
	<!-- target clean javadoc -->
	<target name="clean-javadoc" depends="prepare">
		<delete dir="${vidis.doc.javadoc}" failonerror="true" verbose="true" />
		<echo message="OK" />
	</target>
	
	<!-- target cleanall -->
    <target depends="clean-javadoc,clean-bin" name="clean-all">
    	<echo message="OK" />
	</target>
	
	<!-- target javadoc BUGGY -->
	<target name="javadoc" depends="clean-javadoc,init-compile, init-javadoc">
		<javadoc access="public" author="true"
			classpathref="vidis.classpath"
			destdir="doc/javadoc"
			nodeprecated="false"
			nodeprecatedlist="false"
			noindex="false"
			nonavbar="false"
			notree="false"
			packagenames="vidis.*"
			source="1.5"
			sourcepath="src"
			splitindex="true"
			use="true"
			version="true">
			<link href="${vidis.doc.javadoc}"/>
			<link href="http://java.sun.com/javase/6/docs/api/"/>
		</javadoc>
	</target>
	
	<!-- target jar -->
	<target name="jar" description="This task creates a jar executable of the current build." depends="compile">
		<mkdir dir="${vidis.builds}" />
		<property name="currentJarFile" value="${vidis.builds}${path-spacer}build_${DateSTAMP}_${TimeSTAMP}.jar" />
		<pathconvert property="currentJarLibraries" pathsep=" ">
			<path refid="vidis.libraries" />
			<flattenmapper />
		</pathconvert>
		<jar destfile="${currentJarFile}" compress="true">
			<fileset dir="${vidis.bin}" includes="**${path-spacer}*.class" />
			<fileset dir="${vidis.lib}" includesfile="**${path-spacer}*.*"  />
			<manifest>
				<attribute name="Built-By" value="${user.name}"/>
				<attribute name="Main-Class" value="${vidis.main}" />
				<attribute name="Class-Path" value="${currentJarLibraries}"/>
			</manifest>
		</jar>
	</target>
	
	<!-- target compile -->
	<target name="compile" depends="init-compile">
		<!-- debug wenn fertig auf OFF -->
		<!-- optimize wenn fertig auf ON -->
		<javac fork="false" srcdir="${vidis.src}" destdir="${vidis.bin}" classpathref="vidis.classpath"
				debug="true"
				optimize="false"
		/>
		<echo message="OK" />
	</target>
        
    <target name="profile" depends="get-os-properties, set-vidis-properties, set-system-properties" description="Profile Project">
        <fail unless="netbeans.home">This target can only run inside the NetBeans IDE.</fail>
        <nbprofiledirect>
            <classpath> <pathelement location="${vidis.classpath}"/> </classpath>
        </nbprofiledirect>
        <java classname="${vidis.main}" fork="true" classpathref="vidis.classpath">
            <jvmarg value="${profiler.info.jvmargs.agent}"/>
            <jvmarg value="-Xmx128M" />
        </java>
    </target>
	
	<!-- target launch-vis -->
	<target description="Startet VM und Vidis (JOGL)" name="launch-vis" depends="get-os-properties, set-vidis-properties, set-system-properties">
		<echo message="Starting ${vidis.main}" />
		<echo message="Library path ${vidis.libraries_str}" />
		<java classname="${vidis.main}" fork="true" classpathref="vidis.classpath">
			<!--  dir="${basedir}${path-spacer}data" -->
			<jvmarg line='-Xms128M -Xmx512M -Djava.library.path="${vidis.libraries_str}"'/>
			<arg line="-splash:vidis-logo.png"/>
		</java>
		<echo message="OK" />
	</target>
	
	<!-- target output-system-properties -->
	<target name="output-system-properties" depends="prepare">
		<echo message="Java Version: ${java.version}" />
		<echo message="Java Home: ${java.home}" />
		<echo message="Base Dir: ${basedir}" />
		<echo message="Java Classpath: ${java.class.path}" />
		<echo message="Java Librarypath: ${java.library.path}" />
		<echo message="Vidis Classpath: ${classpath}"/>
		<echo message="Ant Version: ${ant.version}" />
		<echo message="Ant Java Version: ${ant.java.version}" />
	</target>
	
	<!-- target get-os-properties -->
	<target name="get-os-properties">
		<taskdef resource="net/sf/antcontrib/antcontrib.properties">
		  <classpath>
		    <pathelement location="./lib/ant/ant-contrib-1.0b3.jar"/>
		  </classpath>
		</taskdef>
		<!-- determine os family (unix, mac, solaris, windows, ..) -->
		<condition property="isMac" else="false">
			<!-- TODO: don't know if this is working! -->
			<and>
				<os family="mac"/>
			</and>
		</condition>
		<condition property="isUnix" else="false">
			<and>
				<os family="unix" />
			</and>
		</condition>
		<condition property="isSolaris" else="false">
			<!-- TODO: don't know if this is working! -->
			<and>
				<os family="os/2" />
			</and>
		</condition>
		<condition property="isWindows" else="false">
			<or>
				<os family="windows" />
				<os family="win9x" />
			</or>
		</condition>
		<!-- determine architecture (x86, ppc, universal, sparc, sparcv9 -->
		<condition property="isAMD64" else="false">
			<and>
				<os arch="amd64" />
			</and>
		</condition>
		<condition property="isX86" else="false">
			<and>
				<or>
					<os arch="x86" />
					<os arch="i386" />
					<os arch="i486" />
					<os arch="i586" />
					<os arch="i686" />
				</or>
			</and>
		</condition>
		<condition property="isPPC" else="false">
			<and>
				<os arch="ppc" />
			</and>
		</condition>
		<condition property="isUNIVERSAL" else="false">
			<and>
				<os arch="i386" />
                <os family="mac" />
			</and>
		</condition>
		<condition property="isMacOsXUNIVERSAL" else="false">
			<and>
				<os arch="macosx-universal" />
			</and>
		</condition>
		<condition property="isSPARC" else="false">
			<and>
				<os arch="sparc" />
			</and>
		</condition>
		<condition property="isSPARCV9" else="false">
			<and>
				<os arch="sparcv9" />
			</and>
		</condition>
		
		<if>
			<equals arg1="${isWindows}" arg2="true" />
			<then>
				<property name="path-spacer" value="\" />
			</then>
			<elseif>
				<equals arg1="${isUnix}" arg2="true" />
				<then>
					<property name="path-spacer" value="/" />
				</then>
			</elseif>
			<elseif>
				<equals arg1="${isSolaris}" arg2="true" />
				<then>
					<property name="path-spacer" value="/" />
				</then>
			</elseif>
			<elseif>
				<equals arg1="${isMac}" arg2="true" />
				<then>
					<property name="path-spacer" value="/" />
				</then>
			</elseif>
			<else>
				<property name="path-spacer" value="/" />
			</else>
		</if>
	
		<echo message="Running '${os.name}' on '${os.arch}' with pathspacer '${path-spacer}'" />
		<echo message="OS types detected: win{${isWindows}}, mac{${isMac}}, solaris{${isSolaris}}, unix{${isUnix}}" />
		<echo message="Architecture types detected: amd64{${isAMD64}}, x86{${isX86}}, ppc{${isPPC}}, universal{${isUNIVERSAL}}, MacOSXuniversal{${isMacOsXUNIVERSAL}}, sparc{${isSPARC}}, sparcV9: ${isSPARCV9}" />
		
		<!-- load the correct native libraries -->
		<if>
			<equals arg1="${isWindows}" arg2="true" />
			<then>
				<!-- running on windows -->
				<if>
					<equals arg1="${isX86}" arg2="true" />
					<then>
						<!-- arch: x86 -->
						<property name="jogl.library.path" value="jogl-1.1.1${path-spacer}native${path-spacer}windows${path-spacer}x86" />
					</then>
					<elseif>
						<equals arg1="${isAMD64}" arg2="true" />
						<then>
							<!-- arch: amd64 -->
							<property name="jogl.library.path" value="jogl-1.1.1${path-spacer}native${path-spacer}windows${path-spacer}x86-64" />
						</then>
					</elseif>
					<else>
						<echo message="Unsupported arch ${os.arch} for OS ${os.name}" />
					</else>
				</if>
			</then>
			<elseif>
				<equals arg1="${isMac}" arg2="true" />
				<then>
					<!-- running on mac -->
					<if>
						<equals arg1="${isUNIVERSAL}" arg2="true" />
						<then>
							<!-- arch: x86 -->
							<property name="jogl.library.path" value="jogl-1.1.1${path-spacer}native${path-spacer}macosx${path-spacer}universal" />
						</then>
						<elseif>
							<equals arg1="${isPPC}" arg2="true" />
							<then>
								<!-- arch: amd64 -->
								<property name="jogl.library.path" value="jogl-1.1.1${path-spacer}native${path-spacer}macosx${path-spacer}ppc" />
							</then>
						</elseif>
						<else>
							<echo message="Unsupported arch ${os.arch} for OS ${os.name}" />
						</else>
					</if>
				</then>
			</elseif>
			<elseif>
				<equals arg1="${isUnix}" arg2="true" />
				<then>
					<!-- running on unix -->
					<if>
						<equals arg1="${isX86}" arg2="true" />
						<then>
							<!-- arch: x86 -->
							<property name="jogl.library.path" value="jogl-1.1.1${path-spacer}native${path-spacer}linux${path-spacer}x86" />
						</then>
						<elseif>
							<equals arg1="${isAMD64}" arg2="true" />
							<then>
								<!-- arch: amd64 -->
								<property name="jogl.library.path" value="jogl-1.1.1${path-spacer}native${path-spacer}linux${path-spacer}x86-64" />
							</then>
						</elseif>
						<else>
							<echo message="Unsupported arch ${os.arch} for OS ${os.name}" />
						</else>
					</if>
				</then>
			</elseif>
			<elseif>
				<equals arg1="${isSolaris}" arg2="true" />
				<then>
					<!-- running on solaris -->
					<if>
						<equals arg1="${isX86}" arg2="true" />
						<then>
							<!-- arch: x86 -->
							<property name="jogl.library.path" value="jogl-1.1.1${path-spacer}native${path-spacer}solaris${path-spacer}x86" />
						</then>
						<elseif>
							<equals arg1="${isAMD64}" arg2="true" />
							<then>
								<!-- arch: amd64 -->
								<property name="jogl.library.path" value="jogl-1.1.1${path-spacer}native${path-spacer}solaris${path-spacer}x86-64" />
							</then>
						</elseif>
						<elseif>
							<equals arg1="${isSPARC}" arg2="true" />
							<then>
								<!-- arch: sparc -->
								<property name="jogl.library.path" value="jogl-1.1.1${path-spacer}native${path-spacer}solaris${path-spacer}sparc" />
							</then>
						</elseif>
						<elseif>
							<equals arg1="${isSPARCV9}" arg2="true" />
							<then>
								<!-- arch: sparc -->
								<property name="jogl.library.path" value="jogl-1.1.1${path-spacer}native${path-spacer}solaris${path-spacer}sparcv9" />
							</then>
						</elseif>
						<else>
							<echo message="Unsupported arch ${os.arch} for OS ${os.name}" />
						</else>
					</if>
				</then>
			</elseif>
			<else>
				<echo message="Unsupported OS: ${os.name}" />
			</else>
		</if>
	</target>
</project>
